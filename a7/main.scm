(define (split-string str)
  (let ((words '())
        (word '()))
    (let loop ((i 0))
      (cond ((>= i (string-length str))
             (if (not (null? word))
                 (set! words (append words (list (list->string (reverse word))))))
             words)
            ((char=? (string-ref str i) #\space)
             (if (not (null? word))
                 (set! words (append words (list (list->string (reverse word))))))
             (set! word '())
             (loop (+ i 1)))
            (else
             (set! word (cons (string-ref str i) word))
             (loop (+ i 1)))))))

(define lines '())
(define pi (* 4 (atan 1 1)))

(let ((input-port (open-input-file "shapes.dat")))
    (let loop ((line (read-line input-port)))
    (cond ((eof-object? line)
        (close-input-port input-port)
        'done)
    (else
        ; (display line)
        ; (display (split-string line))
        (set! line (string-trim-right line))
        (let (
            (linearr (split-string line)) (outputarr '())) 
            (set! outputarr (append outputarr (list (list-ref linearr 0))))
            (set! outputarr (append outputarr (list (list-ref linearr 1))))
            (if (equal? (list-ref outputarr 1) "box") (let 
                (
                    (output "Box: ")
                    (width (string->number (list-ref linearr 2))) 
                    (dlength (string->number (list-ref linearr 3))) 
                    (height (string->number (list-ref linearr 4)))
                )
                (let (
                    (volume (* width dlength height))
                    (area (+ (* 2(* width dlength)) (* 2 (* width height)) (* 2 (* dlength height))))
                )
                  (set! outputarr (append outputarr (list area)))
                  (set! outputarr (append outputarr (list volume)))
                  (set! output (string-append output (list-ref linearr 0)))
                  (set! output (string-append output ", Length="))
                  (set! output (string-append output (number->string dlength)))
                  (set! output (string-append output ", Width="))
                  (set! output (string-append output (number->string width)))
                  (set! output (string-append output ", Height="))
                  (set! output (string-append output (number->string height)))
                  (set! output (string-append output "\n\tSurface Area: "))
                  (set! output (string-append output (number->string area)))
                  (set! output (string-append output ", Volume: "))
                  (set! output (string-append output (number->string volume)))
                  (set! outputarr (append outputarr (list output)))
                )
                ;(display height)
            ))
            (if (equal? (list-ref outputarr 1) "sphere") (let 
                (
                    (output "Sphere: ")
                    (radius (string->number (list-ref linearr 2)))
                )
                (let (
                    (volume (/ (* 4 radius radius radius pi) 3))
                    (area (* 4 radius radius pi))
                )
                  (set! outputarr (append outputarr (list area)))
                  (set! outputarr (append outputarr (list volume)))
                  (set! output (string-append output (list-ref linearr 0)))
                  (set! output (string-append output ", Radius="))
                  (set! output (string-append output (number->string radius)))
                  (set! output (string-append output "\n\tSurface Area: "))
                  (set! output (string-append output (number->string area)))
                  (set! output (string-append output ", Volume: "))
                  (set! output (string-append output (number->string volume)))
                  (set! outputarr (append outputarr (list output)))
                )
                ;(display height)
            ))
            (if (equal? (list-ref outputarr 1) "cylinder") (let 
                (
                    (output "Cylinder: ")
                    (radius (string->number (list-ref linearr 2)))
                    (height (string->number (list-ref linearr 3)))
                )
                (let (
                    (volume (* pi radius radius height))
                    (area (+ (* 2 pi radius height) (* 2 pi radius radius)))
                )
                  (set! outputarr (append outputarr (list area)))
                  (set! outputarr (append outputarr (list volume)))
                  (set! output (string-append output (list-ref linearr 0)))
                  (set! output (string-append output ", Radius="))
                  (set! output (string-append output (number->string radius)))
                  (set! output (string-append output ", Height="))
                  (set! output (string-append output (number->string height)))
                  (set! output (string-append output "\n\tSurface Area: "))
                  (set! output (string-append output (number->string area)))
                  (set! output (string-append output ", Volume: "))
                  (set! output (string-append output (number->string volume)))
                  (set! outputarr (append outputarr (list output)))
                )
                ;(display height)
            ))
            (if (equal? (list-ref outputarr 1) "torus") (let 
                (
                    (output "Torus: ")
                    (radius (string->number (list-ref linearr 2)))
                    (bigradius (string->number (list-ref linearr 3)))
                )
                (let (
                    (volume (* 2 pi pi radius radius bigradius))
                    (area (* 4 pi pi bigradius radius))
                )
                  (set! outputarr (append outputarr (list area)))
                  (set! outputarr (append outputarr (list volume)))
                  (set! output (string-append output (list-ref linearr 0)))
                  (set! output (string-append output ", Small Radius="))
                  (set! output (string-append output (number->string radius)))
                  (set! output (string-append output ", Big Radius="))
                  (set! output (string-append output (number->string bigradius)))
                  (set! output (string-append output "\n\tSurface Area: "))
                  (set! output (string-append output (number->string area)))
                  (set! output (string-append output ", Volume: "))
                  (set! output (string-append output (number->string volume)))
                  (set! outputarr (append outputarr (list output)))
                )
                ;(display height)
            ))
            ; first element of output arr is name
            ; second is type
            ; third is area, calculated now based off of type
            ; fourth is volume, calculated now
            ; fifth element is the string printed out when showing it
            (set! lines (append lines (list outputarr)))
        )
        ;(set! lines (cons (split-string line) lines))
        (loop (read-line input-port))))))

;(display lines)
; (newline)
(display (length lines))
(newline)
(display (list-ref lines 0) )
(newline)
(display (list-ref lines 3) )
(newline)
